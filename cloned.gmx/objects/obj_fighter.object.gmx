<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fighter_name="Generic";
kicking=false;
punching=false;
hb_y1 = 10;
hb_y2 = 30;
hbo_y1 = 10;
hbo_y2 = 30;
player_speed=0;
opponent = self;
facing_right = true;

// Controller Settings
use_controller=false;
pad_right = gp_axislh;
pad_left  = gp_axislh;
pad_jump  = gp_axislv;
pad_punch = gp_face3;
pad_kick  = gp_face1;
pad_block = gp_face4;


// Sprite settings
sprite_standing = spr_jibbers_standing;
sprite_punching = spr_jibbers_punch;
sprite_kicking  = spr_jibbers_kick;
sprite_walking  = spr_jibbers_walking;
mask_punching   = mask_jibbers_punch;
mask_kicking    = mask_jibbers_kick;

// Character parameters
player_speed = 0;
hp=100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Controls
hspeed = 0;
if(keyboard_check(key_left) || gamepad_axis_value(controller_num, pad_left)&lt;-.8) {
    hspeed=-1*player_speed;
}
if(keyboard_check(key_right) || gamepad_axis_value(controller_num, pad_right)&gt;.8) {
    hspeed=player_speed;
}
if(keyboard_check_pressed(key_punch) || gamepad_button_check_pressed(controller_num, pad_punch)) {
    if(!punching &amp;&amp; !kicking) {
    hitbox_obj=instance_create(x,y,obj_hitbox);
    hitbox_obj.opponent = opponent;
    hitbox_obj.caller = self.id;
//    hitbox_obj.image_speed=0;
    hitbox_obj.sprite_index=mask_punching;
    hitbox_obj.depth=-2000;
    hitbox_obj.image_xscale=image_xscale;
    hitbox_obj.image_yscale=image_yscale;
    hitbox_obj.image_speed=image_speed;
    hitbox_obj.punching=true;
    hitbox_obj.finished_creating=true;
    punching = true;
    sprite_index=sprite_punching;
    depth=-1000;
    }
    
}
if(keyboard_check_pressed(key_kick) || gamepad_button_check_pressed(controller_num, pad_kick)) {
    if(!punching &amp;&amp; !kicking) {
    hitbox_obj=instance_create(x,y,obj_hitbox);
    hitbox_obj.opponent = opponent;
    hitbox_obj.caller = self.id;
    hitbox_obj.sprite_index=mask_kicking;
    hitbox_obj.depth=-2000;
    hitbox_obj.image_xscale=image_xscale;
    hitbox_obj.image_yscale=image_yscale;
    hitbox_obj.image_speed=0;
    hitbox_obj.image_speed=image_speed;
    hitbox_obj.kicking=true;
    hitbox_obj.finished_creating=true;
    kicking = true;
    sprite_index=sprite_kicking;
    depth=-1000;
    }
}

// Check collisions and stop movement
if (1) {
    if (place_meeting(x+hspeed,y,obj_fighter)) hspeed=0;
    if (place_meeting(x,y+vspeed,obj_fighter)) vspeed=0;
}

// Player death
if(hp&lt;=0) {
    hp=0;
    mask_index=spr_empty;
}

// Swap facing direction
if((facing_right == (opponent.x &lt; x))) {
    image_xscale*=-1;
    facing_right = !facing_right;
}

// Check for hit
//var did_hit = (place_meeting(x+hspeed,y,obj_fighter) || place_meeting(x,y+vspeed,obj_fighter));
//if(did_hit) {
//    if(punching==true) {
//        opponent.hp-=5;
//    }
//    if(kicking==true) {
//        opponent.hp-=7;
//    }
//}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(punching==true) {
    punching = false;
    sprite_index=sprite_standing;
    depth=-1;
    opponent.depth=0;
}
if(kicking==true) {
    kicking = false;
    sprite_index=sprite_standing;
    depth=-1;
    opponent.depth=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=xprevious;
y=yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_rectangle_color(hb_x1,hb_y1,hb_x2,hb_y2, c_green, c_green, c_green, c_green, false);
draw_rectangle(hbo_x1,hbo_y1,hbo_x2,hbo_y2,true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
